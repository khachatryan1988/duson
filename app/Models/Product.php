<?php

namespace App\Models;

use App\Casts\MediaCast;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Request;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;
use Spatie\Sluggable\HasSlug;
use Spatie\Sluggable\SlugOptions;
use Spatie\Translatable\HasTranslations;
use Spatie\MediaLibrary\MediaCollections\Models\Media;

class Product extends Model
{
    use HasFactory;
    use HasTranslations;
    use HasSlug;

    public $translatable = ['title', 'description'];

    protected $casts = [
        'price_start' => 'date',
        'price_end' => 'date',
        'media' => MediaCast::class,
        'data' => 'array',
    ];

    protected $guarded = ['id'];

    public function category()
    {
        return $this->belongsTo(Category::class, 'category_id', 'id');
    }

    public function parent()
    {
        return $this->belongsTo(Product::class, 'parent_id', 'id');
    }

    public function attributes()
    {
        return $this->hasMany(ProductAttribute::class, 'product_id');
    }

    public function productAttributes()
    {
        return $this->hasMany(ProductAttribute::class, 'product_id');
    }

    public function getSlugOptions(): SlugOptions
    {
        return SlugOptions::create()
            ->generateSlugsFrom('title')
            ->saveSlugsTo('slug')
            ->doNotGenerateSlugsOnUpdate();
    }

    public function getImageAttribute()
    {
        $image = optional($this->media)->first();
        return !empty($image) ? $image->getUrl('medium') : asset('images/placeholder.jpg');
    }

    public function getThumbnailAttribute()
    {
        $image = optional($this->media)->first();
        return !empty($image) ? $image->getUrl('thumbnail') : asset('images/placeholder.jpg');
    }

    public function getRouteKeyName()
    {
        return 'slug'; // TODO: Change the autogenerated stub
    }

    public function getAmountAttribute()
    {
        return !is_null($this->price) ? number_format($this->price, 0, 2) . ' ' . trans('դր․') : null;
    }

    public function getOldAmountAttribute()
    {
        return !is_null($this->old_price) ? number_format($this->old_price, 0, 2) . ' ' . trans('դր․') : null;
    }

    public function getAvgAmountAttribute()
    {
        return !is_null($this->avg_price) ? number_format($this->avg_price, 0, 2) . ' ' . trans('դր․') : null;
    }

    public function getOptionsAttribute()
    {
        return '';
    }

    public function getSizeGroupAttribute()
    {
        $parentId = $this->parent_id;
        if (empty($parentId)) {
            $parentId = $this->id;
        }

        $products = Product::where(function ($q) use ($parentId) {
            $q->where('id', $parentId);
            $q->orWhere('parent_id', $parentId);
        })->whereNotNull('size')->get();

        return $products;

    }

    public function scopeMainProducts($query)
    {
        return $query->whereNull('parent_id');
    }

    public function relatedProducts()
    {
        $category = $this->category;
        $size = $this->size;

        if (!is_null($size)) {
            $products = Product::where('size', $size)
                ->where('id', '!=', $this->id)
                ->take(8)
                ->get();

            return $products;

        }
        return null;
    }

    public function getAlwaysStockAttribute()
    {
        $categoryIds = [111, 114, 115, 116, 117];

        return $categoryIds;
    }

    public function getStockQuantityAttribute()
    {
        return (in_array($this->category_id, $this->getAlwaysStockAttribute())) ? $this->quantity + 99999 : $this->quantity - 1;
    }

    public function getPriceStartDateAttribute()
    {
        return !is_null($this->price_start) ? Carbon::parse($this->price_start)->format("d.m.Y") : null;
    }

    public function getPriceEndDateAttribute()
    {
        return !is_null($this->price_end) ? Carbon::parse($this->price_end)->format("d.m.Y") : null;
    }

    public function getPriceUnitAttribute()
    {
        return !is_null($this->unit) ? Carbon::parse($this->unit) : null;
    }


}
